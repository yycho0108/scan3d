#!/usr/bin/env python

import numpy as np

def anorm(x):
    return (x + np.pi) % (2*np.pi) - np.pi

def fx(state, dt):
    x,y,z,vx,vy,vz,ax,ay,az,rx,ry,rz,wx,wy,wz = state
    x0=np.cos(rz)
    x1=np.cos(ry)
    x2=dt*x1
    x3=x0*x2
    x4=np.cos(rx)
    x5=np.sin(rz)
    x6=x4*x5
    x7=np.sin(ry)
    x8=np.sin(rx)
    x9=x0*x8
    x10=x7*x9
    x11=x10 - x6
    x12=dt*x11
    x13=x5*x8
    x14=x0*x4
    x15=x13 + x14*x7
    x16=dt*x15
    x17=dt**2
    x18=0.5*x1*x17
    x19=x0*x18
    x20=0.5*x17
    x21=x11*x20
    x22=x15*x20
    x23=x2*x5
    x24=x13*x7
    x25=x14 + x24
    x26=dt*x25
    x27=x6*x7
    x28=x27 - x9
    x29=dt*x28
    x30=x18*x5
    x31=x20*x25
    x32=x20*x28
    x33=-dt*x7
    x34=dt*x8
    x35=x1*x34
    x36=dt*x4
    x37=x1*x36
    x38=x20*x7
    x39=-x38
    x40=x18*x8
    x41=x18*x4
    x42=1.0/x1
    x43=dt*x7*x8
    x44=x42*x43
    x45=dt*x4*x7
    x46=x42*x45
    x47=-x34
    x48=x34*x42
    x49=x36*x42
    x50=-x10 + x6
    x51=0.5*az*x17
    x52=dt*vz
    x53=dt*vx*x7
    x54=0.5*az*x1*x17
    x55=dt*vz*x1
    x56=0.5*ax*x17*x7
    x57=dt*vy*x1
    x58=0.5*ay*x1*x17
    x59=-x14 - x24
    x60=-x27 + x9
    x61=0.5*x17*x59
    x62=vx*x2
    x63=ax*x18
    x64=wz*x36
    x65=1.0*x64
    x66=x1**(-2)
    x67=x66*x7**2
    x68=wy*x34
    x69=1.0*x68
    x70=1.0*x66

    A = np.float32([
        [1, 0, 0,  x0*x2,    x11, x15,    x18,     x20, x21, 0, 0, 0,  0,   0,    0],
        [0, 1, 0,  x2*x4, dt*x23, x26, x17*x4, x19*x23, x27, 0, 0, 0,  0,   0,    0],
        [0, 0, 1, -dt*x6,    x29, x31,   -x32,     x33, x34, 0, 0, 0,  0,   0,    0],
        [0, 0, 0,      1,      0,   0,     dt,       0,   0, 0, 0, 0,  0,   0,    0],
        [0, 0, 0,      0,      1,   0,      0,      dt,   0, 0, 0, 0,  0,   0,    0],
        [0, 0, 0,      0,      0,   1,      0,       0,  dt, 0, 0, 0,  0,   0,    0],
        [0, 0, 0,      0,      0,   0,      1,       0,   0, 0, 0, 0,  0,   0,    0],
        [0, 0, 0,      0,      0,   0,      0,       1,   0, 0, 0, 0,  0,   0,    0],
        [0, 0, 0,      0,      0,   0,      0,       0,   1, 0, 0, 0,  0,   0,    0],
        [0, 0, 0,      0,      0,   0,      0,       0,   0, 1, 0, 0, dt, x37,  x39],
        [0, 0, 0,      0,      0,   0,      0,       0,   0, 0, 1, 0,  0, x30, -x28],
        [0, 0, 0,      0,      0,   0,      0,       0,   0, 0, 0, 1,  0, x40,  x41],
        [0, 0, 0,      0,      0,   0,      0,       0,   0, 0, 0, 0,  1,   0,    0],
        [0, 0, 0,      0,      0,   0,      0,       0,   0, 0, 0, 0,  0,   1,    0],
        [0, 0, 0,      0,      0,   0,      0,       0,   0, 0, 0, 0,  0,   0,    1]])

    J = A + np.float32([
        [0, 0, 0, 0, 0, 0, 0, 0, 0, ay*x21 + vy*x15 + x42*x43 + x42*x44, -x0*x45 - x0*x48 + x13*x46 + x13*x47 + x49*x8 + x50*x8, ay*x53 + dt*vy*x51 - x4*x54 - x4*x55 + x43*x52 + x44*x52, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0,  ay*x27 + az*x53 + vy*x26 + x44*x51,  x12*x49 + x12*x50 - x4*x45 - x4*x48 + x46*x5 + x47*x5,      ax*x18 + ay*x20 + az*x21 + vy*x11 + vz*x15 + x0*x54, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0,   ay*x34 - az*x33 + vy*x31 - vz*x29,   -ay*x32*x7 - az*x3*x32 - vy*x36 - vz*x38 - x54 - x55,                                                        0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0,                                   0,                                                      0,                                                        0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0,                                   0,                                                      0,                                                        0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0,                                   0,                                                      0,                                                        0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0,                                   0,                                                      0,                                                        0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0,                                   0,                                                      0,                                                        0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0,                                   0,                                                      0,                                                        0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0,                     wy*x39 - wz*x37,                          x57*x59 + x57 + x59*x61 + x61,                                                        0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0,                          -x56 - x60,                                                      0,                                                        0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0,                     wy*x41 - wz*x40,                              dt*x6*x62*(wy*x7 + wz*x3),                                                        0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0,                                   0,                                                      0,                                                        0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0,                                   0,                                                      0,                                                        0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0,                                   0,                                                      0,                                                        0, 0, 0, 0]])

    state = A.dot(state)
    state[9:12] = anorm(state[9:12])
    return state, J

def main():
    state = np.random.normal(size=15)
    delta = 0.5
    print ( state )
    state, J = fx(state, delta)
    print ( state )

if __name__ == '__main__':
    main()
